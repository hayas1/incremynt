pub struct Digit(pub [[char; 4]; 6]);
pub struct Digits(pub Vec<Digit>);

pub const ZERO: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┃', '┏', '┓', '┃'],
    ['┃', '┃', '┃', '┃'],
    ['┃', '┃', '┃', '┃'],
    ['┃', '┗', '┛', '┃'],
    ['┗', '━', '━', '┛'],
];

pub const ONE: [[char; 4]; 6] = [
    [' ', '┏', '┓', ' '],
    [' ', '┃', '┃', ' '],
    [' ', '┃', '┃', ' '],
    [' ', '┃', '┃', ' '],
    [' ', '┃', '┃', ' '],
    [' ', '┗', '┛', ' '],
];

pub const TWO: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┗', '━', '┓', '┃'],
    ['┏', '━', '┛', '┃'],
    ['┃', '┏', '━', '┛'],
    ['┃', '┗', '━', '┓'],
    ['┗', '━', '━', '┛'],
];

pub const THREE: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┗', '━', '┓', '┃'],
    ['┏', '━', '┛', '┃'],
    ['┗', '━', '┓', '┃'],
    ['┏', '━', '┛', '┃'],
    ['┗', '━', '━', '┛'],
];

pub const FOUR: [[char; 4]; 6] = [
    ['┏', '┓', '┏', '┓'],
    ['┃', '┃', '┃', '┃'],
    ['┃', '┗', '┛', '┃'],
    ['┗', '━', '┓', '┃'],
    [' ', ' ', '┃', '┃'],
    [' ', ' ', '┗', '┛'],
];

pub const FIVE: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┃', '┏', '━', '┛'],
    ['┃', '┗', '━', '┓'],
    ['┗', '━', '┓', '┃'],
    ['┏', '━', '┛', '┃'],
    ['┗', '━', '━', '┛'],
];

pub const SIX: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┃', '┏', '━', '┛'],
    ['┃', '┗', '━', '┓'],
    ['┃', '┏', '┓', '┃'],
    ['┃', '┗', '┛', '┃'],
    ['┗', '━', '━', '┛'],
];

pub const SEVEN: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┃', '┏', '┓', '┃'],
    ['┗', '┛', '┃', '┃'],
    [' ', ' ', '┃', '┃'],
    [' ', ' ', '┃', '┃'],
    [' ', ' ', '┗', '┛'],
];

pub const EIGHT: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┃', '┏', '┓', '┃'],
    ['┃', '┗', '┛', '┃'],
    ['┃', '┏', '┓', '┃'],
    ['┃', '┗', '┛', '┃'],
    ['┗', '━', '━', '┛'],
];

pub const NINE: [[char; 4]; 6] = [
    ['┏', '━', '━', '┓'],
    ['┃', '┏', '┓', '┃'],
    ['┃', '┗', '┛', '┃'],
    ['┗', '━', '┓', '┃'],
    ['┏', '━', '┛', '┃'],
    ['┗', '━', '━', '┛'],
];

pub const DIGITS: [[[char; 4]; 6]; 10] =
    [ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE];

impl std::fmt::Display for Digit {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        for row in self.0 {
            for c in row {
                write!(f, "{}", c)?;
            }
            writeln!(f)?;
        }
        Ok(())
    }
}
impl std::fmt::Display for Digits {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        for i in 0..6 {
            for row in &self.0 {
                for c in row.0[i] {
                    write!(f, "{}", c)?;
                }
            }
            writeln!(f)?;
        }
        Ok(())
    }
}
